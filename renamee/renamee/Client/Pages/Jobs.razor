@page "/jobs"
@using renamee.Shared.Models;

<PageTitle>Jobs</PageTitle>

<MudText Typo="Typo.h4" Class="ml-4 mt-4">Jobs</MudText>

@if (jobs == null)
{
    <p><em>Loading jobs...</em></p>
}
else
{
    <MudExpansionPanels Class="ma-4">
        @foreach (var job in jobs)
        {
            <MudExpansionPanel Text="@job.Name">
                <TitleContent>
                    <MudChip Label="true" Size="Size.Small" Color="@(job.IsEnabled ? Color.Success : Color.Error)">@(job.IsEnabled ? "enabled" : "disabled")</MudChip>

                    <MudText Typo="Typo.h6">@job.Name</MudText>

                    <MudText Typo="Typo.caption" Align="Align.Right" Style="width: 100%">Last executed on: @job.LastExecutedOn.ToString("yyyy.MM.dd HH:mm")</MudText>
                </TitleContent>
                <ChildContent>
                    <MudCard>
                        <EditForm Model="@job">
                            <FluentValidationValidator />
                            <ValidationSummary />
                            <MudCardContent>
                                <MudTextField @bind-Value="job.Name"
                                      For="@(() => job.Name)"
                                      Immediate="true"
                                      Label="Job name" />

                                <MudTextField @bind-Value="job.Options.SourceFolder"
                                      For="@(() => job.Options.SourceFolder)"
                                      Immediate="true"
                                      Label="Source folder" />

                                <MudTextField @bind-Value="job.Options.DestinationFolder"
                                      For="@(() => job.Options.DestinationFolder)"
                                      Immediate="true"
                                      Label="Destination folder" />

                                <MudTextField @bind-Value="job.Options.FormatPattern"
                                      For="@(() => job.Options.FormatPattern)"
                                      Immediate="true"
                                      Label="Format pattern" />

                                <MudSwitch @bind-Checked="job.IsEnabled" Color="Color.Success">@(job.IsEnabled ? "Enabled" : "Disabled")</MudSwitch>
                            </MudCardContent>
                        </EditForm>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" OnClick="@(async () => await Delete(job))">Delete</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" OnClick="@(async () => await Delete(job))">Delete</MudButton>
                        </MudCardActions>
                    </MudCard>
                </ChildContent>

            </MudExpansionPanel>
        }
    </MudExpansionPanels>

}
